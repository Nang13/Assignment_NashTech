@page
@model PES.UI.Pages.User.ChatModel
@{
}

<div class="container-fluid page-header py-5">
    <h1 class="text-center text-white display-6">Checkout</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        <li class="breadcrumb-item"><a href="#">Pages</a></li>
        <li class="breadcrumb-item active text-white">Checkout</li>
    </ol>
</div>
<h1>SignalR Chat</h1>

<h1>Private Chat</h1>
<div id="chatSection">
    <div>
        <h2>Contacts</h2>
        <ul id="contactsList"></ul>
        <input id="contactUsernameInput" type="text" placeholder="Add Contact" />
        <button id="addContactButton">Add Contact</button>
    </div>
    <div>
        <h2>Chat</h2>
        <input id="recipientInput" type="text" placeholder="Recipient Username" />
        <input id="messageInput" type="text" placeholder="Message" />
        <button id="sendButton">Send Private Message</button>
    </div>
    <ul id="messagesList"></ul>
</div>
<ul id="messagesList"></ul>
<h2>Group Chat</h2>
<input type="text" id="groupNameInput" placeholder="Group Name" />
<button onclick="joinGroup()">Join Group</button>
<button onclick="leaveGroup()">Leave Group</button>
<input type="text" id="groupMessageInput" placeholder="Message" />
<button onclick="sendGroupMessage()">Send</button>
<ul id="groupMessagesList"></ul>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const token = getCookie('AccessToken');
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7187/chatHub",  { accessTokenFactory: () => token })
                .build();

            // Handle connection state changes
            connection.onclose(() => {
                console.log("Connection closed");
            });

            connection.start()
                .then(() => {
                    console.log("Connection started");
                    // Now that the connection is established, you can send messages
                    connection.invoke("SendPrivateMessage", user, message)
                        .then(() => {
                            console.log("Message sent successfully");
                        })
                        .catch(error => {
                            console.error("Error sending message:", error);
                        });
                })
                .catch(error => {
                    console.error("Error starting connection:", error);
                });


            connection.on('ReceivePrivateMessage', (user, message) => {
                const li = document.createElement('li');
                li.textContent = `${user}: ${message}`;
                document.getElementById('messagesList').appendChild(li);
            });

            try {
                await connection.start();
                console.log('Connected to SignalR hub');
                document.getElementById('sendButton').disabled = false;
            } catch (err) {
                console.error('Error connecting to SignalR hub', err);
            }

            document.getElementById('sendButton').addEventListener('click', async () => {
                const recipient = document.getElementById('recipientInput').value;
                const message = document.getElementById('messageInput').value;
                if (connection.state === signalR.HubConnectionState.Connected) {
                    try {
                        await connection.invoke('SendPrivateMessage', recipient, message);
                    } catch (err) {
                        console.error('Error sending message', err);
                    }
                } else {
                    console.error('Connection is not in the connected state.');
                }
            });

            document.getElementById('addContactButton').addEventListener('click', async () => {
                const contactUsername = document.getElementById('contactUsernameInput').value;
                try {
                    const response = await fetch('https://localhost:7187/api/v1/Chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(contactUsername)
                    });

                    if (response.ok) {
                        await loadContacts();
                    } else {
                        console.error('Error adding contact');
                    }
                } catch (err) {
                    console.error('Error adding contact', err);
                }
            });

            async function loadContacts() {
                try {
                    const response = await fetch('https://localhost:7187/api/v1/Chat', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    const contacts = await response.json();
                    const contactsList = document.getElementById('contactsList');
                    contactsList.innerHTML = '';
                    contacts.forEach(contact => {
                        const li = document.createElement('li');
                        li.textContent = contact;
                        contactsList.appendChild(li);
                    });
                } catch (err) {
                    console.error('Error loading contacts', err);
                }
            }

            await loadContacts();
        });

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
    </script>
}


 // connection.on("ReceiveGroupMessage", (user, message) => {
        //     const li = document.createElement("li");
        //     li.textContent = `${user}: ${message}`;
        //     document.getElementById("groupMessagesList").appendChild(li);
        // });


        // function sendPrivateMessage() {
        //     const user = document.getElementById("userInput").value;
        //     const message = document.getElementById("privateMessageInput").value;
        //     connection.invoke("SendPrivateMessage", user, message).catch(err => console.error(err.toString()));
        // }
     

        // function sendGroupMessage() {
        //     const groupName = document.getElementById("groupNameInput").value;
        //     const message = document.getElementById("groupMessageInput").value;
        //     connection.invoke("SendMessageToGroup", groupName, message).catch(err => console.error(err.toString()));
        // }

        // function joinGroup() {
        //     const groupName = document.getElementById("groupNameInput").value;
        //     connection.invoke("JoinGroup", groupName).catch(err => console.error(err.toString()));
        // }

        // function leaveGroup() {
        //     const groupName = document.getElementById("groupNameInput").value;
        //     connection.invoke("LeaveGroup", groupName).catch(err => console.error(err.toString()));
        // }
